import { $APP, shadow$provide, $jscomp } from "./nbb_core.js";
const shadow_esm_import = function(x) { return import(x) };
import*as esm_import$fs from"fs";import*as esm_import$crypto from"crypto";import*as esm_import$child_process from"child_process";import*as esm_import$path from"path";var Esa=new $APP.E(null,"deps","deps",1883360319);var Fsa=$APP.Xe.h($APP.r($APP.nV),$APP.GO),Gsa=esm_import$path.resolve(Fsa,".nbb",".cache"),$W=$APP.zr.h($APP.r($APP.nV),new $APP.F(null,2,5,$APP.H,[$APP.$G,Esa],null));
if($APP.l($W)){var Hsa;Hsa=esm_import$crypto.createHash("sha1").update($APP.m.g($W),"binary").digest("hex");var aX=esm_import$path.resolve(Gsa,Hsa),Isa=esm_import$path.resolve(aX,"deps.edn"),Jsa=esm_import$path.resolve(aX,"nbb-deps.jar"),bX=esm_import$path.resolve(aX,"nbb-deps");if(!$APP.l(esm_import$fs.existsSync(bX))){var Ksa=($APP.z.h("win32",process.platform),"bb"),cX=esm_import$path.resolve(Gsa,"extract.bb");esm_import$fs.mkdirSync(aX,{recursive:!0});esm_import$fs.writeFileSync(Isa,$APP.m.g(new $APP.k(null,
1,[Esa,$W],null)));$APP.pb.call(null,"Downloading dependencies...");esm_import$child_process.execSync([Ksa," --config ",$APP.m.g(Isa)," --deps-root ",$APP.m.g(Fsa)," uberjar ",$APP.m.g(Jsa)].join(""));$APP.pb.call(null,"Extracting dependencies...");esm_import$fs.writeFileSync(cX,["(fs/unzip ",$APP.Nk.l($APP.B([Jsa]))," ",$APP.Nk.l($APP.B([bX])),")"].join(""));esm_import$child_process.execSync(["bb ",$APP.m.g(cX)].join(""));esm_import$fs.unlinkSync(cX);$APP.pb.call(null,"Done.")}$APP.Ir(bX)};