import { $APP, shadow$provide, $jscomp } from "./nbb_core.js";
const shadow_esm_import = function(x) { return import(x) };
var cZ=function(a,b){return $APP.z.h(a,b)?new $APP.F(null,3,5,$APP.H,[null,null,a],null):new $APP.F(null,3,5,$APP.H,[a,b,null],null)},Mva=function(a){return $APP.u(a)?$APP.hf.j(function(b,c){var d=$APP.A.j(c,0,null);c=$APP.A.j(c,1,null);return $APP.Gj.j(b,d,c)},$APP.fi($APP.qp.h($APP.qh.h($APP.sp,$APP.Bj(a)),null)),a):null},Nva=function(a,b,c){var d=$APP.Xe.h(a,c),e=$APP.Xe.h(b,c),f=dZ(d,e),h=$APP.A.j(f,0,null),n=$APP.A.j(f,1,null);f=$APP.A.j(f,2,null);a=$APP.Ze(a,c);b=$APP.Ze(b,c);d=a&&b&&(null!=
f||null==d&&null==e);return new $APP.F(null,3,5,$APP.H,[!a||null==h&&d?null:$APP.Qg([c,h]),!b||null==n&&d?null:$APP.Qg([c,n]),d?$APP.Qg([c,f]):null],null)},Ova=function(a,b){var c=$APP.sk,d=c.h,e=eZ.j,f=$APP.Me(a)?a:$APP.fi(a),h=$APP.Me(b)?b:$APP.fi(b),n=$APP.Pp.g;a=$APP.me(a);b=$APP.me(b);return $APP.fi(d.call(c,Mva,e.call(eZ,f,h,n.call($APP.Pp,a>b?a:b))))},Pva=function(a,b){return new $APP.F(null,3,5,$APP.H,[$APP.Tg($APP.mT.h(a,b)),$APP.Tg($APP.mT.h(b,a)),$APP.Tg($APP.lT.h(a,b))],null)},fZ=function(a){if(null!=
a&&null!=a.Kh)a=a.Kh(a);else{var b=fZ[$APP.ca(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=fZ._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw $APP.Cb("EqualityPartition.equality-partition",a);}return a},gZ=function(a,b){if(null!=a&&null!=a.Jh)a=a.Jh(a,b);else{var c=gZ[$APP.ca(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=gZ._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw $APP.Cb("Diff.diff-similar",a);}return a},dZ=function(a,b){return $APP.z.h(a,
b)?new $APP.F(null,3,5,$APP.H,[null,null,a],null):$APP.z.h(fZ(a),fZ(b))?gZ(a,b):cZ(a,b)},hZ=new $APP.E(null,"atom","atom",-397043653),Qva=new $APP.t(null,"diff","diff",-518492986,null),Rva=new $APP.E(null,"sequential","sequential",-1082983960),Sva=new $APP.t("clojure.data","diff","clojure.data/diff",-683865998,null);var eZ=function eZ(a){switch(arguments.length){case 2:return eZ.h(arguments[0],arguments[1]);case 3:return eZ.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.m.g(arguments.length)].join(""));}};eZ.h=function(a,b){return eZ.j(a,b,$APP.kT.h($APP.Bj(a),$APP.Bj(b)))};eZ.j=function(a,b,c){return $APP.hf.j(function(d,e){return $APP.Lp.g($APP.sk.j($APP.qn,d,e))},new $APP.F(null,3,5,$APP.H,[null,null,null],null),$APP.sk.h($APP.sn.j(Nva,a,b),c))};eZ.o=3;fZ["null"]=function(){return hZ};
fZ.string=function(){return hZ};fZ.number=function(){return hZ};fZ.array=function(){return Rva};fZ["function"]=function(){return hZ};fZ["boolean"]=function(){return hZ};fZ._=function(a){return(null!=a?a.G&1024||$APP.Ad===a.zh||(a.G?0:$APP.Ab($APP.ec,a)):$APP.Ab($APP.ec,a))?$APP.oo:(null!=a?a.G&4096||$APP.Ad===a.Dh||(a.G?0:$APP.Ab($APP.ic,a)):$APP.Ab($APP.ic,a))?$APP.xo:(null!=a?a.G&16777216||$APP.Ad===a.Bf||(a.G?0:$APP.Ab($APP.Dc,a)):$APP.Ab($APP.Dc,a))?Rva:hZ};
gZ["null"]=function(a,b){return cZ(a,b)};gZ.string=function(a,b){return cZ(a,b)};gZ.number=function(a,b){return cZ(a,b)};gZ.array=function(a,b){return Ova(a,b)};gZ["function"]=function(a,b){return cZ(a,b)};gZ["boolean"]=function(a,b){return cZ(a,b)};
gZ._=function(a,b){var c=function(){var d=fZ(a);d=d instanceof $APP.E?d.ea:null;switch(d){case "atom":return cZ;case "set":return Pva;case "sequential":return Ova;case "map":return eZ;default:throw Error(["No matching clause: ",$APP.m.g(d)].join(""));}}();return c.h?c.h(a,b):c.call(null,a,b)};var Tva=$APP.hV.h($APP.uM,null),Uva=new $APP.k(null,1,[Qva,function(){var a=new $APP.Id(function(){return dZ},Sva,$APP.kj([$APP.S,$APP.P,$APP.yn,$APP.sD,$APP.Fo,$APP.zn,$APP.sS,$APP.Y,$APP.O,$APP.yQ],[$APP.uM,Qva,"clojure/data.cljs",11,1,144,144,$APP.I(new $APP.F(null,2,5,$APP.H,[$APP.dI,$APP.bI],null)),"Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality.",
$APP.l(dZ)?dZ.F:null])),b=$APP.r(a),c=$APP.Ce(a);a=$APP.l(null)?null:$APP.P.g(c);var d=new $APP.k(null,4,[$APP.S,Tva,$APP.P,a,$APP.Y,$APP.Y.g(c),$APP.O,$APP.O.g(c)],null);return $APP.l($APP.it.g(c))?$APP.bV.j(a,b,d):$APP.l(function(){var e=$APP.ts.g(c);return $APP.l(e)?e:$APP.Ks.g(c)}())?$APP.cV.j(a,b,d):$APP.Tx.j(a,b,d)}()],null);$APP.Sy(new $APP.k(null,1,[$APP.Ws,new $APP.k(null,1,[$APP.uM,Uva],null)],null));